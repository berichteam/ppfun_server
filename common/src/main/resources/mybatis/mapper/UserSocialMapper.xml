<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pipi.common.persistence.mapper.UserSocialMapper" >
  <resultMap id="BaseResultMap" type="com.pipi.common.domain.UserSocial" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="open_id" property="openId" jdbcType="VARCHAR" />
    <result column="union_id" property="unionId" jdbcType="VARCHAR" />
    <result column="nick_name" property="nickName" jdbcType="VARCHAR" />
    <result column="gender" property="gender" jdbcType="VARCHAR" />
    <result column="avatar_url" property="avatarUrl" jdbcType="VARCHAR" />
    <result column="city" property="city" jdbcType="VARCHAR" />
    <result column="province" property="province" jdbcType="VARCHAR" />
    <result column="country" property="country" jdbcType="VARCHAR" />
    <result column="social_type" property="socialType" jdbcType="SMALLINT" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
    <result column="session_key" property="sessionKey" jdbcType="VARCHAR" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from user_social
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.pipi.common.domain.UserSocial" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user_social (user_id, open_id, union_id, 
      nick_name, gender, avatar_url, 
      city, province, country, 
      social_type, created_at, updated_at, 
      session_key)
    values (#{userId,jdbcType=BIGINT}, #{openId,jdbcType=VARCHAR}, #{unionId,jdbcType=VARCHAR}, 
      #{nickName,jdbcType=VARCHAR}, #{gender,jdbcType=VARCHAR}, #{avatarUrl,jdbcType=VARCHAR}, 
      #{city,jdbcType=VARCHAR}, #{province,jdbcType=VARCHAR}, #{country,jdbcType=VARCHAR}, 
      #{socialType,jdbcType=SMALLINT}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, 
      #{sessionKey,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.pipi.common.domain.UserSocial" >
    update user_social
    set user_id = #{userId,jdbcType=BIGINT},
      open_id = #{openId,jdbcType=VARCHAR},
      union_id = #{unionId,jdbcType=VARCHAR},
      nick_name = #{nickName,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=VARCHAR},
      avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      city = #{city,jdbcType=VARCHAR},
      province = #{province,jdbcType=VARCHAR},
      country = #{country,jdbcType=VARCHAR},
      social_type = #{socialType,jdbcType=SMALLINT},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      session_key = #{sessionKey,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, user_id, open_id, union_id, nick_name, gender, avatar_url, city, province, 
    country, social_type, created_at, updated_at, session_key
    from user_social
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, user_id, open_id, union_id, nick_name, gender, avatar_url, city, province, 
    country, social_type, created_at, updated_at, session_key
    from user_social
  </select>

  <select id="findBySocialTypeAndOpenId" resultMap="BaseResultMap">
    select * from user_social
    where social_type = #{socialType} and open_id = #{openId}
  </select>

  <select id="findByUserAndSocialType" resultMap="BaseResultMap">
    select * from user_social
    where user_id = #{userId} and social_type = #{socialType}
  </select>
</mapper>